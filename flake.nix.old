{
  description = "freiheit.com technologies - richie";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";
    nix-darwin = {
      url = "github:nix-darwin/nix-darwin/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nix-homebrew = {
      url = "github:zhaofengli-wip/nix-homebrew";
    };
    home-manager.url = "github:nix-community/home-manager";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";
    homebrew-bundle = {
      url = "github:homebrew/homebrew-bundle";
      flake = false;
    };
    homebrew-core = {
      url = "github:homebrew/homebrew-core";
      flake = false;
    };
    homebrew-cask = {
      url = "github:homebrew/homebrew-cask";
      flake = false;
    };
    dotfiles = {
      url = "github:ricardoedgarsilva/dotfiles";
      flake = false;
    };
  };

  outputs =
    inputs@{
      self,
      nixpkgs,
      nix-darwin,
      nix-homebrew,
      home-manager,
      homebrew-bundle,
      homebrew-core,
      homebrew-cask,
      dotfiles,
    }:
    let
      user = "ricardo.silva";
      configuration =
        { pkgs, ... }:
        {
          # List packages installed in system profile. To search by name, run:
          # $ nix-env -qaP | grep wget
          environment.systemPackages = [
            # Utilities/Tools
            pkgs.bash-completion
            pkgs.coreutils
            pkgs.neofetch
            pkgs.lcov
            pkgs.nixfmt
            pkgs.gh

            # Productivity & Office
            pkgs.obsidian
            pkgs.thunderbird

            # Development & Tools
            pkgs.google-cloud-sdk
            pkgs.colima
            pkgs.docker
            pkgs.docker-compose
            pkgs.git
            pkgs.hermitcli
            pkgs.vscode
            pkgs.nodejs

            # Browsers
            pkgs.firefox
            pkgs.vscode
          ];

          # Necessary for using flakes on this system.
          nix.settings.experimental-features = "nix-command flakes";

          # Enable alternative shell support in nix-darwin.
          # programs.fish.enable = true;

          # Set Git commit hash for darwin-version.
          system.configurationRevision = self.rev or self.dirtyRev or null;

          # The platform the configuration will be used on.
          nixpkgs.hostPlatform = "aarch64-darwin";

          nix = {
            enable = true;
          };

          nixpkgs = {
            config = {
              allowUnfree = true;
            };
          };

          system = {
            # Used for backwards compatibility
            # $ darwin-rebuild changelog
            stateVersion = 6;
            primaryUser = user;

            defaults = {
              NSGlobalDomain = {
                KeyRepeat = 2; # Values: 120, 90, 60, 30, 12, 6, 2
                InitialKeyRepeat = 15; # Values: 120, 94, 68, 35, 25, 15
                "com.apple.mouse.tapBehavior" = 1;
              };

              dock = {
                autohide = true;
                show-recents = false;
                launchanim = true;
                orientation = "bottom";
                tilesize = 48;
              };
            };
          };

          security = {
            pam.services.sudo_local.touchIdAuth = true;
          };

          users.users.${user} = {
            name = "${user}";
            home = "/Users/${user}";
            isHidden = false;
            shell = pkgs.zsh;
          };

          homebrew = {
            enable = true;
            onActivation = {
              autoUpdate = true;
              cleanup = "zap"; # Uninstall packages not managed by Homebrew
            };
            casks = [
              "1password"
              "chatgpt"
              "deepl"
              "logi-options+"
              "microsoft-teams"
              "postman"
              "whatsapp"
            ];

            # Currently not possible to install apps from the Mac App Store
            # masApps = {
            #   "1password" = 1333542190;
            # };
          };

          home-manager = {
            useGlobalPkgs = true;
            users.${user} =
              {
                pkgs,
                config,
                lib,
                ...
              }:
              {
                home = {
                  enableNixpkgsReleaseCheck = false;
                  stateVersion = "25.05";
                  packages = with pkgs; [
                    dockutil
                    yabai
                    skhd
                  ];
                };

                xdg.enable = true;

                # yabai config
                xdg.configFile."yabai/yabairc" = {
                  source = "${dotfiles}/yabai/yabairc";
                  executable = true;
                };

                # skhd config
                xdg.configFile."skhd/skhdrc" = {
                  source = "${dotfiles}/skhd/skhdrc";
                  executable = true;
                };
              };
          };
        };
    in
    {
      # Build darwin flake using:
      # $ darwin-rebuild build --flake .#simple
      darwinConfigurations."simple" = nix-darwin.lib.darwinSystem {
        modules = [
          home-manager.darwinModules.home-manager
          nix-homebrew.darwinModules.nix-homebrew
          {
            nix-homebrew = {
              inherit user;
              enable = true;
              taps = {
                "homebrew/homebrew-core" = homebrew-core;
                "homebrew/homebrew-cask" = homebrew-cask;
                "homebrew/homebrew-bundle" = homebrew-bundle;
              };
              mutableTaps = false;
              autoMigrate = true;
            };
          }
          configuration
        ];
      };
    };
}
